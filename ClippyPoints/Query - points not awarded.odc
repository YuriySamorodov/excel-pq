<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/x-ms-odc; charset=utf-8">
<meta name=ProgId content=ODC.Database>
<meta name=SourceType content=OLEDB>
<title>Query - points not awarded</title>
<xml id=docprops><o:DocumentProperties
  xmlns:o="urn:schemas-microsoft-com:office:office"
  xmlns="http://www.w3.org/TR/REC-html40">
  <o:Description>Connection to the 'points not awarded' query in the workbook.</o:Description>
  <o:Name>Query - points not awarded</o:Name>
 </o:DocumentProperties>
</xml><xml id=msodc><odc:OfficeDataConnection
  xmlns:odc="urn:schemas-microsoft-com:office:odc"
  xmlns="http://www.w3.org/TR/REC-html40">
  <odc:PowerQueryConnection odc:Type="OLEDB">
   <odc:ConnectionString>Provider=Microsoft.Mashup.OleDb.1;Data Source=$Workbook$;Location=points not awarded;Extended Properties=&quot;&quot;</odc:ConnectionString>
   <odc:CommandType>SQL</odc:CommandType>
   <odc:CommandText>SELECT * FROM [points not awarded]</odc:CommandText>
  </odc:PowerQueryConnection>
  <odc:PowerQueryMashupData>&lt;Mashup xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns=&quot;http://schemas.microsoft.com/DataMashup&quot;&gt;&lt;Client&gt;EXCEL&lt;/Client&gt;&lt;Version&gt;2.57.5068.181&lt;/Version&gt;&lt;MinVersion&gt;2.21.0.0&lt;/MinVersion&gt;&lt;Culture&gt;fr-FR&lt;/Culture&gt;&lt;SafeCombine&gt;true&lt;/SafeCombine&gt;&lt;Items&gt;&lt;Query Name=&quot;subreddit_new&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = (after as text, subreddit as text) =&gt; let&#13;&#10;    Source = Json.Document(Web.Contents(&quot;https://www.reddit.com/r/&quot; &amp; subreddit &amp; &quot;/new.json?after=&quot; &amp; after)),&#13;&#10;    data = Source[data],&#13;&#10;    next_after = data[after],&#13;&#10;    children = data[children],&#13;&#10;    #&quot;Converted to Table&quot; = Table.FromList(children, Splitter.SplitByNothing(), null, null, ExtraValues.Error),&#13;&#10;&#13;&#10;    // If the result set is empty, then the try/otherwise will create one null row&#13;&#10;    #&quot;Expanded Column1&quot; = try Table.ExpandRecordColumn(#&quot;Converted to Table&quot;, &quot;Column1&quot;, {&quot;data&quot;}, {&quot;data&quot;}) otherwise #table(type table [data],{{null}}),&#13;&#10;    #&quot;Expanded data&quot; = Table.ExpandRecordColumn(#&quot;Expanded Column1&quot;, &quot;data&quot;, {&quot;domain&quot;, &quot;approved_at_utc&quot;, &quot;mod_reason_by&quot;, &quot;banned_by&quot;, &quot;num_reports&quot;, &quot;media_embed&quot;, &quot;subreddit&quot;, &quot;selftext_html&quot;, &quot;selftext&quot;, &quot;likes&quot;, &quot;suggested_sort&quot;, &quot;user_reports&quot;, &quot;secure_media&quot;, &quot;is_reddit_media_domain&quot;, &quot;saved&quot;, &quot;id&quot;, &quot;banned_at_utc&quot;, &quot;mod_reason_title&quot;, &quot;view_count&quot;, &quot;archived&quot;, &quot;clicked&quot;, &quot;report_reasons&quot;, &quot;author&quot;, &quot;num_crossposts&quot;, &quot;link_flair_text&quot;, &quot;mod_reports&quot;, &quot;can_mod_post&quot;, &quot;is_crosspostable&quot;, &quot;pinned&quot;, &quot;score&quot;, &quot;approved_by&quot;, &quot;over_18&quot;, &quot;hidden&quot;, &quot;thumbnail&quot;, &quot;subreddit_id&quot;, &quot;edited&quot;, &quot;link_flair_css_class&quot;, &quot;author_flair_css_class&quot;, &quot;contest_mode&quot;, &quot;gilded&quot;, &quot;downs&quot;, &quot;brand_safe&quot;, &quot;secure_media_embed&quot;, &quot;removal_reason&quot;, &quot;author_flair_text&quot;, &quot;stickied&quot;, &quot;can_gild&quot;, &quot;is_self&quot;, &quot;parent_whitelist_status&quot;, &quot;name&quot;, &quot;spoiler&quot;, &quot;permalink&quot;, &quot;subreddit_type&quot;, &quot;locked&quot;, &quot;hide_score&quot;, &quot;created&quot;, &quot;url&quot;, &quot;whitelist_status&quot;, &quot;quarantine&quot;, &quot;title&quot;, &quot;created_utc&quot;, &quot;subreddit_name_prefixed&quot;, &quot;ups&quot;, &quot;media&quot;, &quot;num_comments&quot;, &quot;visited&quot;, &quot;mod_note&quot;, &quot;is_video&quot;, &quot;distinguished&quot;}, {&quot;domain&quot;, &quot;approved_at_utc&quot;, &quot;mod_reason_by&quot;, &quot;banned_by&quot;, &quot;num_reports&quot;, &quot;media_embed&quot;, &quot;subreddit&quot;, &quot;selftext_html&quot;, &quot;selftext&quot;, &quot;likes&quot;, &quot;suggested_sort&quot;, &quot;user_reports&quot;, &quot;secure_media&quot;, &quot;is_reddit_media_domain&quot;, &quot;saved&quot;, &quot;id&quot;, &quot;banned_at_utc&quot;, &quot;mod_reason_title&quot;, &quot;view_count&quot;, &quot;archived&quot;, &quot;clicked&quot;, &quot;report_reasons&quot;, &quot;author&quot;, &quot;num_crossposts&quot;, &quot;link_flair_text&quot;, &quot;mod_reports&quot;, &quot;can_mod_post&quot;, &quot;is_crosspostable&quot;, &quot;pinned&quot;, &quot;score&quot;, &quot;approved_by&quot;, &quot;over_18&quot;, &quot;hidden&quot;, &quot;thumbnail&quot;, &quot;subreddit_id&quot;, &quot;edited&quot;, &quot;link_flair_css_class&quot;, &quot;author_flair_css_class&quot;, &quot;contest_mode&quot;, &quot;gilded&quot;, &quot;downs&quot;, &quot;brand_safe&quot;, &quot;secure_media_embed&quot;, &quot;removal_reason&quot;, &quot;author_flair_text&quot;, &quot;stickied&quot;, &quot;can_gild&quot;, &quot;is_self&quot;, &quot;parent_whitelist_status&quot;, &quot;name&quot;, &quot;spoiler&quot;, &quot;permalink&quot;, &quot;subreddit_type&quot;, &quot;locked&quot;, &quot;hide_score&quot;, &quot;created&quot;, &quot;url&quot;, &quot;whitelist_status&quot;, &quot;quarantine&quot;, &quot;title&quot;, &quot;created_utc&quot;, &quot;subreddit_name_prefixed&quot;, &quot;ups&quot;, &quot;media&quot;, &quot;num_comments&quot;, &quot;visited&quot;, &quot;mod_note&quot;, &quot;is_video&quot;, &quot;distinguished&quot;}),&#13;&#10;    #&quot;Changed Type&quot; = Table.TransformColumnTypes(#&quot;Expanded data&quot;,{{&quot;approved_at_utc&quot;, Int64.Type}, {&quot;banned_at_utc&quot;, Int64.Type}, {&quot;edited&quot;, Int64.Type}, {&quot;created&quot;, Int64.Type}, {&quot;created_utc&quot;, Int64.Type}}),&#13;&#10;    #&quot;Added Custom&quot; = Table.AddColumn(#&quot;Changed Type&quot;, &quot;next_after&quot;, each next_after),&#13;&#10;    #&quot;Grouped Rows&quot; = Table.Group(#&quot;Added Custom&quot;, {&quot;next_after&quot;}, {{&quot;data&quot;, each _, type table}})&#13;&#10;in&#13;&#10;    #&quot;Grouped Rows&quot;&#13;&#10;in&#13;&#10;    Source]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;UnixTime2Excel&quot;&gt;&lt;Formula&gt;&lt;![CDATA[(unix_time as number)=&gt;&#13;&#10;let&#13;&#10;    excel_time = if unix_time = 0 then null else DateTime.From(unix_time / 86400 + 25569)&#13;&#10;in&#13;&#10;    excel_time]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;SubredditNewRecursive&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = (subreddit as text) =&gt; let&#13;&#10;    fnRecursive = (tbl, subreddit, after) =&gt;&#13;&#10;        let&#13;&#10;            Source = subreddit_new(after, subreddit),&#13;&#10;            next_after = Table.FromList(Source[next_after], Splitter.SplitByNothing(), null, null, ExtraValues.Error){0}[Column1],&#13;&#10;            fnResult = if next_after=null then Table.Combine({tbl, Source}) else @fnRecursive(Table.Combine({tbl, Source}), subreddit, next_after)&#13;&#10;        in&#13;&#10;            fnResult,&#13;&#10;&#13;&#10;    empty = #table(&#13;&#10;        {&#13;&#10;            &quot;next_after&quot;,   // First Column Field Name&#13;&#10;            &quot;data&quot;   // Second Column Field Name&#13;&#10;        },&#13;&#10;        {}&#13;&#10;    ),&#13;&#10;&#13;&#10;    result = fnRecursive(empty, subreddit, &quot;&quot;),&#13;&#10;    #&quot;Expanded data&quot; = Table.ExpandTableColumn(result, &quot;data&quot;, {&quot;domain&quot;, &quot;approved_at_utc&quot;, &quot;mod_reason_by&quot;, &quot;banned_by&quot;, &quot;num_reports&quot;, &quot;media_embed&quot;, &quot;subreddit&quot;, &quot;selftext_html&quot;, &quot;selftext&quot;, &quot;likes&quot;, &quot;suggested_sort&quot;, &quot;user_reports&quot;, &quot;secure_media&quot;, &quot;is_reddit_media_domain&quot;, &quot;saved&quot;, &quot;id&quot;, &quot;banned_at_utc&quot;, &quot;mod_reason_title&quot;, &quot;view_count&quot;, &quot;archived&quot;, &quot;clicked&quot;, &quot;report_reasons&quot;, &quot;author&quot;, &quot;num_crossposts&quot;, &quot;link_flair_text&quot;, &quot;mod_reports&quot;, &quot;can_mod_post&quot;, &quot;is_crosspostable&quot;, &quot;pinned&quot;, &quot;score&quot;, &quot;approved_by&quot;, &quot;over_18&quot;, &quot;hidden&quot;, &quot;thumbnail&quot;, &quot;subreddit_id&quot;, &quot;edited&quot;, &quot;link_flair_css_class&quot;, &quot;author_flair_css_class&quot;, &quot;contest_mode&quot;, &quot;gilded&quot;, &quot;downs&quot;, &quot;brand_safe&quot;, &quot;secure_media_embed&quot;, &quot;removal_reason&quot;, &quot;author_flair_text&quot;, &quot;stickied&quot;, &quot;can_gild&quot;, &quot;is_self&quot;, &quot;parent_whitelist_status&quot;, &quot;name&quot;, &quot;spoiler&quot;, &quot;permalink&quot;, &quot;subreddit_type&quot;, &quot;locked&quot;, &quot;hide_score&quot;, &quot;created&quot;, &quot;url&quot;, &quot;whitelist_status&quot;, &quot;quarantine&quot;, &quot;title&quot;, &quot;created_utc&quot;, &quot;subreddit_name_prefixed&quot;, &quot;ups&quot;, &quot;media&quot;, &quot;num_comments&quot;, &quot;visited&quot;, &quot;mod_note&quot;, &quot;is_video&quot;, &quot;distinguished&quot;, &quot;link_id&quot;, &quot;link_author&quot;, &quot;replies&quot;, &quot;parent_id&quot;, &quot;collapsed&quot;, &quot;body&quot;, &quot;link_title&quot;, &quot;is_submitter&quot;, &quot;collapsed_reason&quot;, &quot;body_html&quot;, &quot;score_hidden&quot;, &quot;link_permalink&quot;, &quot;link_url&quot;, &quot;controversiality&quot;}, {&quot;domain&quot;, &quot;approved_at_utc&quot;, &quot;mod_reason_by&quot;, &quot;banned_by&quot;, &quot;num_reports&quot;, &quot;media_embed&quot;, &quot;subreddit&quot;, &quot;selftext_html&quot;, &quot;selftext&quot;, &quot;likes&quot;, &quot;suggested_sort&quot;, &quot;user_reports&quot;, &quot;secure_media&quot;, &quot;is_reddit_media_domain&quot;, &quot;saved&quot;, &quot;id&quot;, &quot;banned_at_utc&quot;, &quot;mod_reason_title&quot;, &quot;view_count&quot;, &quot;archived&quot;, &quot;clicked&quot;, &quot;report_reasons&quot;, &quot;author&quot;, &quot;num_crossposts&quot;, &quot;link_flair_text&quot;, &quot;mod_reports&quot;, &quot;can_mod_post&quot;, &quot;is_crosspostable&quot;, &quot;pinned&quot;, &quot;score&quot;, &quot;approved_by&quot;, &quot;over_18&quot;, &quot;hidden&quot;, &quot;thumbnail&quot;, &quot;subreddit_id&quot;, &quot;edited&quot;, &quot;link_flair_css_class&quot;, &quot;author_flair_css_class&quot;, &quot;contest_mode&quot;, &quot;gilded&quot;, &quot;downs&quot;, &quot;brand_safe&quot;, &quot;secure_media_embed&quot;, &quot;removal_reason&quot;, &quot;author_flair_text&quot;, &quot;stickied&quot;, &quot;can_gild&quot;, &quot;is_self&quot;, &quot;parent_whitelist_status&quot;, &quot;name&quot;, &quot;spoiler&quot;, &quot;permalink&quot;, &quot;subreddit_type&quot;, &quot;locked&quot;, &quot;hide_score&quot;, &quot;created&quot;, &quot;url&quot;, &quot;whitelist_status&quot;, &quot;quarantine&quot;, &quot;title&quot;, &quot;created_utc&quot;, &quot;subreddit_name_prefixed&quot;, &quot;ups&quot;, &quot;media&quot;, &quot;num_comments&quot;, &quot;visited&quot;, &quot;mod_note&quot;, &quot;is_video&quot;, &quot;distinguished&quot;, &quot;link_id&quot;, &quot;link_author&quot;, &quot;replies&quot;, &quot;parent_id&quot;, &quot;collapsed&quot;, &quot;body&quot;, &quot;link_title&quot;, &quot;is_submitter&quot;, &quot;collapsed_reason&quot;, &quot;body_html&quot;, &quot;score_hidden&quot;, &quot;link_permalink&quot;, &quot;link_url&quot;, &quot;controversiality&quot;}),&#13;&#10;    #&quot;Changed Type&quot; = Table.TransformColumnTypes(#&quot;Expanded data&quot;,{{&quot;approved_at_utc&quot;, Int64.Type}, {&quot;banned_at_utc&quot;, Int64.Type}, {&quot;edited&quot;, Int64.Type}, {&quot;created&quot;, Int64.Type}, {&quot;created_utc&quot;, Int64.Type}}),&#13;&#10;    #&quot;Converted edited to Excel time&quot; = Table.TransformColumns(#&quot;Changed Type&quot;, {{&quot;edited&quot;, each UnixTime2Excel(_), type datetime}}),&#13;&#10;    #&quot;Converted created to Excel time&quot; = Table.TransformColumns(#&quot;Converted edited to Excel time&quot;, {{&quot;created&quot;, each UnixTime2Excel(_), type datetime}}),&#13;&#10;    #&quot;Converted created_utc to Excel time&quot; = Table.TransformColumns(#&quot;Converted created to Excel time&quot;, {{&quot;created_utc&quot;, each UnixTime2Excel(_), type datetime}})&#13;&#10;in&#13;&#10;    #&quot;Converted created_utc to Excel time&quot;&#13;&#10;in&#13;&#10;    Source]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;Query Name=&quot;points not awarded&quot;&gt;&lt;Formula&gt;&lt;![CDATA[let&#13;&#10;    Source = SubredditNewRecursive(&quot;excel&quot;),&#13;&#10;    #&quot;Changed Type&quot; = Table.TransformColumnTypes(Source,{{&quot;next_after&quot;, type text}, {&quot;domain&quot;, type text}, {&quot;approved_at_utc&quot;, type any}, {&quot;mod_reason_by&quot;, type any}, {&quot;banned_by&quot;, type any}, {&quot;num_reports&quot;, type any}, {&quot;media_embed&quot;, type text}, {&quot;subreddit&quot;, type text}, {&quot;selftext_html&quot;, type text}, {&quot;selftext&quot;, type text}, {&quot;likes&quot;, type any}, {&quot;suggested_sort&quot;, type text}, {&quot;user_reports&quot;, type text}, {&quot;secure_media&quot;, type any}, {&quot;is_reddit_media_domain&quot;, type logical}, {&quot;saved&quot;, type logical}, {&quot;id&quot;, type text}, {&quot;banned_at_utc&quot;, type any}, {&quot;mod_reason_title&quot;, type any}, {&quot;view_count&quot;, type any}, {&quot;archived&quot;, type logical}, {&quot;clicked&quot;, type logical}, {&quot;report_reasons&quot;, type any}, {&quot;author&quot;, type text}, {&quot;num_crossposts&quot;, Int64.Type}, {&quot;link_flair_text&quot;, type text}, {&quot;mod_reports&quot;, type text}, {&quot;can_mod_post&quot;, type logical}, {&quot;is_crosspostable&quot;, type logical}, {&quot;pinned&quot;, type logical}, {&quot;score&quot;, Int64.Type}, {&quot;approved_by&quot;, type any}, {&quot;over_18&quot;, type logical}, {&quot;hidden&quot;, type logical}, {&quot;thumbnail&quot;, type any}, {&quot;subreddit_id&quot;, type text}, {&quot;edited&quot;, type datetime}, {&quot;link_flair_css_class&quot;, type text}, {&quot;author_flair_css_class&quot;, type text}, {&quot;contest_mode&quot;, type logical}, {&quot;gilded&quot;, Int64.Type}, {&quot;downs&quot;, Int64.Type}, {&quot;brand_safe&quot;, type logical}, {&quot;secure_media_embed&quot;, type text}, {&quot;removal_reason&quot;, type any}, {&quot;author_flair_text&quot;, Int64.Type}, {&quot;stickied&quot;, type logical}, {&quot;can_gild&quot;, type logical}, {&quot;is_self&quot;, type logical}, {&quot;parent_whitelist_status&quot;, type text}, {&quot;name&quot;, type text}, {&quot;spoiler&quot;, type logical}, {&quot;permalink&quot;, type text}, {&quot;subreddit_type&quot;, type text}, {&quot;locked&quot;, type logical}, {&quot;hide_score&quot;, type logical}, {&quot;created&quot;, type datetime}, {&quot;url&quot;, type text}, {&quot;whitelist_status&quot;, type text}, {&quot;quarantine&quot;, type logical}, {&quot;title&quot;, type text}, {&quot;created_utc&quot;, type datetime}, {&quot;subreddit_name_prefixed&quot;, type text}, {&quot;ups&quot;, Int64.Type}, {&quot;media&quot;, type any}, {&quot;num_comments&quot;, Int64.Type}, {&quot;visited&quot;, type logical}, {&quot;mod_note&quot;, type any}, {&quot;is_video&quot;, type logical}, {&quot;distinguished&quot;, type any}, {&quot;link_id&quot;, type any}, {&quot;link_author&quot;, type any}, {&quot;replies&quot;, type any}, {&quot;parent_id&quot;, type any}, {&quot;collapsed&quot;, type any}, {&quot;body&quot;, type any}, {&quot;link_title&quot;, type any}, {&quot;is_submitter&quot;, type any}, {&quot;collapsed_reason&quot;, type any}, {&quot;body_html&quot;, type any}, {&quot;score_hidden&quot;, type any}, {&quot;link_permalink&quot;, type any}, {&quot;link_url&quot;, type any}, {&quot;controversiality&quot;, type any}}),&#13;&#10;    #&quot;Filtered Rows&quot; = Table.SelectRows(#&quot;Changed Type&quot;, each ([link_flair_css_class] = &quot;solvedcase&quot;)),&#13;&#10;    #&quot;Filtered Rows1&quot; = Table.SelectRows(#&quot;Filtered Rows&quot;, each not DateTime.IsInPreviousNHours([created_utc], 50)),&#13;&#10;    #&quot;Removed Columns&quot; = Table.RemoveColumns(#&quot;Filtered Rows1&quot;,{&quot;link_flair_css_class&quot;, &quot;link_flair_text&quot;, &quot;next_after&quot;, &quot;domain&quot;, &quot;approved_at_utc&quot;, &quot;mod_reason_by&quot;, &quot;banned_by&quot;, &quot;num_reports&quot;, &quot;media_embed&quot;, &quot;subreddit&quot;, &quot;selftext_html&quot;, &quot;selftext&quot;, &quot;likes&quot;, &quot;suggested_sort&quot;, &quot;user_reports&quot;, &quot;secure_media&quot;, &quot;is_reddit_media_domain&quot;, &quot;saved&quot;, &quot;id&quot;, &quot;banned_at_utc&quot;, &quot;mod_reason_title&quot;, &quot;view_count&quot;, &quot;archived&quot;, &quot;clicked&quot;, &quot;report_reasons&quot;, &quot;author&quot;, &quot;num_crossposts&quot;, &quot;mod_reports&quot;, &quot;can_mod_post&quot;, &quot;is_crosspostable&quot;, &quot;pinned&quot;, &quot;score&quot;, &quot;approved_by&quot;, &quot;over_18&quot;, &quot;hidden&quot;, &quot;thumbnail&quot;, &quot;subreddit_id&quot;, &quot;edited&quot;, &quot;author_flair_css_class&quot;, &quot;contest_mode&quot;, &quot;gilded&quot;, &quot;downs&quot;, &quot;brand_safe&quot;, &quot;secure_media_embed&quot;, &quot;removal_reason&quot;, &quot;author_flair_text&quot;, &quot;stickied&quot;, &quot;can_gild&quot;, &quot;is_self&quot;, &quot;parent_whitelist_status&quot;, &quot;name&quot;, &quot;spoiler&quot;, &quot;permalink&quot;, &quot;subreddit_type&quot;, &quot;locked&quot;, &quot;hide_score&quot;, &quot;created&quot;, &quot;whitelist_status&quot;, &quot;quarantine&quot;, &quot;title&quot;, &quot;subreddit_name_prefixed&quot;, &quot;ups&quot;, &quot;media&quot;, &quot;visited&quot;, &quot;mod_note&quot;, &quot;is_video&quot;, &quot;distinguished&quot;, &quot;link_id&quot;, &quot;link_author&quot;, &quot;replies&quot;, &quot;parent_id&quot;, &quot;collapsed&quot;, &quot;body&quot;, &quot;link_title&quot;, &quot;is_submitter&quot;, &quot;collapsed_reason&quot;, &quot;body_html&quot;, &quot;score_hidden&quot;, &quot;link_permalink&quot;, &quot;link_url&quot;, &quot;controversiality&quot;})&#13;&#10;in&#13;&#10;    #&quot;Removed Columns&quot;]]&gt;&lt;/Formula&gt;&lt;IsParameterQuery xsi:nil=&quot;true&quot; /&gt;&lt;IsDirectQuery xsi:nil=&quot;true&quot; /&gt;&lt;/Query&gt;&lt;/Items&gt;&lt;/Mashup&gt;</odc:PowerQueryMashupData>
 </odc:OfficeDataConnection>
</xml>
<style>
<!--
    .ODCDataSource
    {
    behavior: url(dataconn.htc);
    }
-->
</style>
 
</head>

<body onload='init()' scroll=no leftmargin=0 topmargin=0 rightmargin=0 style='border: 0px'>
<table style='border: solid 1px threedface; height: 100%; width: 100%' cellpadding=0 cellspacing=0 width='100%'> 
  <tr> 
    <td id=tdName style='font-family:arial; font-size:medium; padding: 3px; background-color: threedface'> 
      &nbsp; 
    </td> 
     <td id=tdTableDropdown style='padding: 3px; background-color: threedface; vertical-align: top; padding-bottom: 3px'>

      &nbsp; 
    </td> 
  </tr> 
  <tr> 
    <td id=tdDesc colspan='2' style='border-bottom: 1px threedshadow solid; font-family: Arial; font-size: 1pt; padding: 2px; background-color: threedface'>

      &nbsp; 
    </td> 
  </tr> 
  <tr> 
    <td colspan='2' style='height: 100%; padding-bottom: 4px; border-top: 1px threedhighlight solid;'> 
      <div id='pt' style='height: 100%' class='ODCDataSource'></div> 
    </td> 
  </tr> 
</table> 

  
<script language='javascript'> 

function init() { 
  var sName, sDescription; 
  var i, j; 
  
  try { 
    sName = unescape(location.href) 
  
    i = sName.lastIndexOf(".") 
    if (i>=0) { sName = sName.substring(1, i); } 
  
    i = sName.lastIndexOf("/") 
    if (i>=0) { sName = sName.substring(i+1, sName.length); } 

    document.title = sName; 
    document.getElementById("tdName").innerText = sName; 

    sDescription = document.getElementById("docprops").innerHTML; 
  
    i = sDescription.indexOf("escription>") 
    if (i>=0) { j = sDescription.indexOf("escription>", i + 11); } 

    if (i>=0 && j >= 0) { 
      j = sDescription.lastIndexOf("</", j); 

      if (j>=0) { 
          sDescription = sDescription.substring(i+11, j); 
        if (sDescription != "") { 
            document.getElementById("tdDesc").style.fontSize="x-small"; 
          document.getElementById("tdDesc").innerHTML = sDescription; 
          } 
        } 
      } 
    } 
  catch(e) { 

    } 
  } 
</script> 

</body> 
 
</html>
